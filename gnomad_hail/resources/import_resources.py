from inspect import getmembers
from typing import Dict, Tuple, Optional
from gnomad_hail.resources.resource_utils import BaseResource, BaseVersionedResource
import gnomad_hail.resources.grch37 as grch37
import gnomad_hail.resources.grch38 as grch38
import argparse


# Generate a dictionary of resource available for import for a given genome build
def get_module_importable_resources(module, prefix: Optional[str] = None) -> Dict[str, Tuple[str, BaseResource]]:
    """
    This takes a module that was imported and generates a list of all resources in this module that can be imported (i.e. with a path and import_func).
    The dict produced is as follows:
    keys: {prefix}.{resource_name}.{version} (with prefix only present if `prefix` is set, and `version` only present for versioned resources)
    values: ({resource_name}[ version {version}], resource) with resource_name set to the variable name in the module and the version present for versioned resources.

     The following example will generate a dict with all the resources in gnomad_hail.resources.grch37 that can be imported:

    .. code-block:: python

        import gnomad_hail.resources.grch37 as grch37
        grch37_resources = get_module_importable_resources(grch37, prefix='grch37')
    
    :param module: Input module
    :param prefix: 
    :return: 
    """
    _prefix = f'{prefix}.' if prefix is not None else ''
    resources = {}
    for resource_name, resource in getmembers(module, lambda x: isinstance(x, BaseResource)):
        if resource.path and resource.import_func:
            arg_name = f'{_prefix}{resource_name}'
            if isinstance(resource, BaseVersionedResource):
                for version in resource.versions:
                    arg_name += f'.{version}'
                    resource_name = f'{resource_name} version {version}'
            resources[arg_name] = (resource_name, resource)
    return resources


def add_arguments_from_resources_dict(container: argparse._ActionsContainer, resources_dict: Dict[str, Tuple[str, BaseResource]]) -> None:
    """
    Adds resources as arguments to an argparse._ActionsContainer (typically a parser or argument group) from a resources dict as generated by get_module_importable_resources.
    Each resource is added as argument `--resource_key` where resource_key is its corresponding key in `resources_dict`, using `action="store_true"`.

    :param container: Input argparse container
    :param resources_dict: Resources to add
    :return: Nothing
    """
    for arg_name, (resource_name, resource) in resources_dict.items():
        container.add_argument(
            f"--{arg_name}",
            help="Imports {}{} to {}".format(
                resource_name,
                " from " + resource.import_args.get('path', '???') if resource.import_args else "???",
                resource.path
            ),
            action="store_true"
        )
        

grch37_resources = get_module_importable_resources(grch37, 'grch37')
grch38_resources = get_module_importable_resources(grch38, 'grch38')


def main(args):
    resources = grch37_resources
    resources.update(grch38_resources)
    for arg in [arg for arg, arg_value in vars(args).items() if arg_value and arg != 'overwrite']:
            resource_name, resource = resources[arg]
            print(f"Importing {resource_name}...")
            resource.import_resource(args.overwrite)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    grch37_grp = parser.add_argument_group('grch37 resources')
    add_arguments_from_resources_dict(grch37_grp, grch37_resources)
    grch38_grp = parser.add_argument_group('grch38 resources')
    add_arguments_from_resources_dict(grch38_grp, grch38_resources)
    parser.add_argument("--overwrite", help="Overwrites existing files", action="store_true")
    main(parser.parse_args())
